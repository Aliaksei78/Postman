{
	"info": {
		"_postman_id": "9c940a43-fc06-48c2-8665-50577f154c7e",
		"name": "HW3_Postman2__Alexei_Revenko",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1__/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches string === This is the first responce from server!\", function () {\r",
							"    pm.expect(pm.response.text()).to.eql(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "2__/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"   var jsonDataResponse = pm.response.json();\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"name in json response === Teodor\", function () {\r",
							"       pm.expect(jsonDataResponse.name).to.eql(\"Teodor\");\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"age in json response === \\\"50\\\"\", function () {\r",
							"       pm.expect(jsonDataResponse.age).to.eql(\"50\");\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"salary in json response === 800\", function () {\r",
							"        pm.expect(jsonDataResponse.salary).to.eql(800);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request.\r",
							"   var form_dataDataRequest = request.data; // //this works for form-data\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name in json response === name in form-data request === \" + (form_dataDataRequest.name), function () {\r",
							"        pm.expect(jsonDataResponse.name).to.eql(form_dataDataRequest.name);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"age in json response === age in form-data request === \" + \"\\\"\"+(form_dataDataRequest.age)+ \"\\\"\", function () {\r",
							"        pm.expect(jsonDataResponse.age).to.eql(form_dataDataRequest.age);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"salary in json response === salary in form-data request === \" + Number(form_dataDataRequest.salary), function () {\r",
							"        pm.expect(jsonDataResponse.salary).to.eql(Number(form_dataDataRequest.salary));\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log(\"Family:\" + \"\\n\" +\"Children: \" + jsonDataResponse.family.children[0][0]+ \" age \" + jsonDataResponse.family.children[0][1] +\",\" + \" and  \" +\r",
							"jsonDataResponse.family.children[1][0]+ \" age \" + jsonDataResponse.family.children[1][1] +\",\"+ \"\\n\" + \r",
							"\"Salary after 1.5 year: \" + jsonDataResponse.family.u_salary_1_5_year);\r",
							"\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"\\\"u_salary_1_5_year\\\" in json response === salary*4 in form-data request === \" + Number(form_dataDataRequest.salary*4), function () {\r",
							"        pm.expect(jsonDataResponse.family.u_salary_1_5_year).to.eql(Number(form_dataDataRequest.salary)*4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Teodor",
							"type": "default"
						},
						{
							"key": "age",
							"value": "50",
							"contentType": "",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "800",
							"contentType": "",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "3__/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"var jsonDataResponse = pm.response.json();\r",
							"//console.log(jsonDataResponse);\r",
							"\r",
							"// 4. Спарсить request.\r",
							"var query = {};\r",
							"pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});\r",
							"\r",
							"//а можно и так спарсить реквест из урла. так даже проще.\r",
							"//var query = pm.request.url.query.toObject();\r",
							"//console.log(query);\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name in json response === name in GET request === \" + (query.name), function () {\r",
							"        pm.expect(jsonDataResponse.name).to.eql(query.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"age in json response === age in GET request === \" + \"\\\"\"+(query.age)+ \"\\\"\", function () {\r",
							"        pm.expect(jsonDataResponse.age).to.eql(query.age);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"salary in json response === salary in GET request === \" + Number(query.salary), function () {\r",
							"        pm.expect(jsonDataResponse.salary).to.eql(Number(query.salary));\r",
							"});\r",
							"\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(\"Family:\" + \"\\n\" +\"Children: \" + jsonDataResponse.family.children[0][0]+ \" age \" + jsonDataResponse.family.children[0][1] + \" and \" +\r",
							"jsonDataResponse.family.children[1][0]+ \" age \" + jsonDataResponse.family.children[1][1] +\",\"+ \"\\n\" + \r",
							"\"Pets: \"+ \"\\n\" + \"Cat: \"+ jsonDataResponse.family.pets.cat.name+ \" age \" + jsonDataResponse.family.pets.cat.age +\",\" +\"\\n\" +\r",
							"\"Dog: \"+ jsonDataResponse.family.pets.dog.name+ \" age \" + jsonDataResponse.family.pets.dog.age +\",\" +\"\\n\" +\r",
							"\"Salary after 1.5 year: \" + jsonDataResponse.family.u_salary_1_5_year);\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog has a parameter 'name'\", function () {\r",
							"        for (var i=0; i<Object.keys(jsonDataResponse.family.pets.dog).length; i++){\r",
							"             //console.log(Object.keys(jsonDataResponse.family.pets.dog)[i]);\r",
							"             if ((Object.keys(jsonDataResponse.family.pets.dog)[i])===(\"name\")){\r",
							"                pm.expect(Object.keys(jsonDataResponse.family.pets.dog)[i]).to.eql(\"name\");\r",
							"                break;\r",
							"            }\r",
							"        }\r",
							"});\r",
							"\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog has a parameter 'age'\", function () {\r",
							"        for (var i=0; i<Object.keys(jsonDataResponse.family.pets.dog).length; i++){\r",
							"            //console.log(Object.keys(jsonDataResponse.family.pets.dog)[i]);\r",
							"             if ((Object.keys(jsonDataResponse.family.pets.dog)[i])===(\"age\")){\r",
							"                pm.expect(Object.keys(jsonDataResponse.family.pets.dog)[i]).to.eql(\"age\");\r",
							"                break;\r",
							"            }\r",
							"        }\r",
							"});\r",
							"\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dog has a parameter 'name' === 'Luky'\", function () {\r",
							"        //console.log(jsonDataResponse.family.pets.dog.name);\r",
							"        pm.expect(jsonDataResponse.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Dog has a parameter 'age' === 4\", function () {\r",
							"        //console.log(jsonDataResponse.family.pets.dog.age);\r",
							"        pm.expect(jsonDataResponse.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Garry&age=20&salary=5000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Garry"
						},
						{
							"key": "age",
							"value": "20"
						},
						{
							"key": "salary",
							"value": "5000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "4__/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"var jsonDataResponse = pm.response.json();\r",
							"//console.log(jsonDataResponse);\r",
							"\r",
							"\r",
							"// 4. Спарсить request.\r",
							"var query = {};\r",
							"pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});\r",
							"//console.log(query.name);\r",
							"\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name in json response === name in GET request === \" + (query.name), function () {\r",
							"        pm.expect(jsonDataResponse.name).to.eql(query.name);\r",
							"});\r",
							"\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"age in json response === age in GET request === \" + query.age, function () {\r",
							"        pm.expect(jsonDataResponse.age).to.eql(Number(query.age));\r",
							"});\r",
							"\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(\"Salary in request: \" + query.salary);\r",
							"\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(\"Salary in response: \" + jsonDataResponse.salary);\r",
							"\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary из response.\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary из response.\r",
							"console.log(\"Salary[0] in response: \" + jsonDataResponse.salary[0]);\r",
							"console.log(\"Salary[1] in response: \" + \"\\\"\" + jsonDataResponse.salary[1])+ \"\\\"\" ;\r",
							"console.log(\"Salary[2] in response: \" + \"\\\"\" + jsonDataResponse.salary[2])+ \"\\\"\" ;\r",
							"\r",
							"\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"salary[0] from response === salary from request ===\" + jsonDataResponse.salary[0], function () {\r",
							"        //console.log(jsonDataResponse.family.pets.dog.name);\r",
							"        pm.expect(jsonDataResponse.salary[0]).to.eql(Number(query.salary));\r",
							"});\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.\r",
							"pm.test(\"salary[1] from response === salary from request ===\" + \"\\\"\" + jsonDataResponse.salary[1] + \"\\\"\", function () {\r",
							"        //console.log(jsonDataResponse.family.pets.dog.name);\r",
							"        pm.expect(jsonDataResponse.salary[1]).to.eql(String(query.salary*2));\r",
							"});\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.\r",
							"pm.test(\"salary[2] from response === salary from request ===\" + \"\\\"\" + jsonDataResponse.salary[2] + \"\\\"\", function () {\r",
							"        //console.log(jsonDataResponse.family.pets.dog.name);\r",
							"        pm.expect(jsonDataResponse.salary[2]).to.eql(String(query.salary*3));\r",
							"});\r",
							"\r",
							"//15. Создать в окружении переменную name - сделал через UI Postman\r",
							"//16. Создать в окружении переменную age - сделал через UI Postman\r",
							"//17. Создать в окружении переменную salary - сделал через UI Postman\r",
							"\r",
							"\r",
							"//18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", \"Anna\"); // создает переменную в окружении и инициализирует её\r",
							"\r",
							"//19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\"); // создает переменную в окружении без инициализации === null\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\");// создает переменную в окружении без инициализации === null\r",
							"\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (var i=0; i<jsonDataResponse.salary.length; i++){\r",
							"if  (typeof jsonDataResponse.salary[i] === \"number\")\r",
							"console.log([i+1] + \". Salary in response: \" + jsonDataResponse.salary[i])\r",
							"else console.log([i+1] + \". Salary in response: \" + \"\\\"\" + jsonDataResponse.salary[i])+ \"\\\"\"\r",
							"};\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Sam&age=30&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Sam"
						},
						{
							"key": "age",
							"value": "30"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		}
	]
}